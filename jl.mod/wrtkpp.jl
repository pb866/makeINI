__precompile__()
"""
# Module *wrtkpp*

Holds functions to write kpp code for initialisation data from data text files.

# Structure of input files
```shell
# Line comment: separation by whitespaces
# <KPP species name>  <vd / emission rate>
DEPOS     5.00d-6 #Inline comment: Use 'DEPOS' to override standard vd
CH3OH     1.00d-5
```

# Functions
- emikpp
- print_scrn (internal)
- write_kpp (internal)
"""
module wrtkpp
using DataFrames
export emikpp


"""
    emikpp(fout,emiss,kppspc)

Write emission data (in emiss) to output file (fout), if species is part of the current
mechanism (species exists in kppspc).
"""
function emikpp(fout,emiss,kppspc)
  # Find common species of emission data and current mechanism
  emiidx = findin(emiss[:spc],kppspc)
  emispc = DataFrame(spc = String[], emi = String[])
  emispc = emiss[emiidx,:]
  # Write mechanism to kpp file and print screen info
  write_kpp(fout,emispc)
  print_scrn(emispc,length(emiss[1])-length(emispc[1]))
end #function emikpp


"""
    print_scrn(emispc,warn)

Print emissions used in current scenario (with species/emissions saved in emispc)
to screen and warn about omitted species in the emission data (saved in warn).
"""
function print_scrn(emispc,warn)

# Add warning if number of species in the original emission data differs
# from number of emissions used (info handed over in warn)
  if warn != 0
    println("\033[95mWarning! $(abs(warn)) species ignored\n"*
            "as they are not part of the current mechanism.\033[0m\n")
  end

# Print emission data of current scenario to screen
  println("\033[92mThe following emissions are used in the current scenario:\033[0m\n")

  # Find longest species name for output formatting
  strmax = 0
  for str in emispc[:spc] if length(str) > strmax strmax = length(str) end end
  # Loop over species and print data to screen
  for i in collect(1:length(emispc[:spc]))
    align = ""; for j in collect(length(emispc[i,:spc]):strmax) align *= " " end
    @printf "%s%s%s\n" "$(emispc[i,:spc]):" align emispc[i,:emi]
  end
end #function print_scrn


"""
    write_kpp(fout,emispc)

Write emissions data of current scenario (with species/emissions saved in emispc)
to the defined output kpp file (fout).
"""
function write_kpp(fout,emispc)
  # Open write file
  open(fout,"w+") do f
    # Print header including information about applied script and date/time
    println(f,"//Generated by makeEMISS.jl (version 1.3) on $(Date(now())), $(Dates.Time(now()))")
    println(f,"//For updates, see https://github.com/pb866/makeINI")
    println(f,"#EQUATIONS")
    # Loop over species and write kpp code
    for (i,spc) in enumerate(emispc[:spc])
      println(f,"{E$i}  EMISS = $spc :  $(emispc[i,:emi]) ;")
    end
  end
end #function write_kpp

end #module rddat
